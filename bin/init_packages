#!/bin/bash

function package_exists () {
    if [[ $(cat /etc/*-release) =~ Ubuntu ]]; then
        dpkg -l "$*"
    elif [[ $(cat /etc/*-release) =~ CentOS ]]; then
        rpm -q --quiet "$*"
    fi
}


function init_chrome () {
    if [[ $(cat /etc/*-release) =~ Ubuntu ]]; then
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo dpkg -i google-chrome-stable_current_amd64.deb
    elif [[ $(cat /etc/*-release) =~ CentOS ]]; then
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
        sudo dnf localinstall google-chrome-stable_current_x86_64.rpm
    fi
}

function init_pg () {
    if [[ $(cat /etc/*-release) =~ Ubuntu ]]; then
        sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        sudo apt-get update
        sudo apt-get -y install postgresql libpq-dev
    elif [[ $(cat /etc/*-release) =~ CentOS ]]; then
        # 导入 pg 源
        sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
        # 关闭 centos 内置的 pg 模块
        sudo dnf -qy module disable postgresql
        # 安装 pg
        sudo dnf install -y postgresql14-devel
        # 初始化数据库
        sudo /usr/pgsql-14/bin/postgresql-14-setup initdb

        sudo systemctl enable postgresql-14
        sudo systemctl start postgresql-14

        sudo -u postgres psql -p 5432 -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PASSWORD';"

        # For install sequel_pg succesful, we have to add pg_config into $PATH
        sed -i '1iPATH=/usr/pgsql-14/bin:$PATH'
    fi
}

function init_nodejs () {
    if [[ $(cat /etc/*-release) =~ Ubuntu ]]; then
        curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
        sudo apt-get install -y nodejs
    elif [[ $(cat /etc/*-release) =~ CentOS ]]; then
        if ! package_exists nodejs; then
            curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -
            sudo yum install -y nodejs
        fi
    fi
}

function init_nginx () {
    if [[ $(cat /etc/*-release) =~ Ubuntu ]]; then
        # 使用下面的命令查看 Ubuntu 发布版的编号
        code_name=$(cat /etc/lsb-release |grep DISTRIB_CODENAME |cut -d'=' -f2)

        sudo wget https://nginx.org/keys/nginx_signing.key
        sudo apt-key add nginx_signing.key

        if ! package_exists nginx; then
            cat <<HEREDOC > /etc/apt/sources.list.d/nginx.list
deb https://nginx.org/packages/ubuntu/ ${code_name} nginx
deb-src https://nginx.org/packages/ubuntu/ ${code_name} nginx
HEREDOC

            sudo apt update
            sudo apt install nginx
            systemctl enable nginx
        fi

        if ! package_exists python-certbot-nginx; then

            # sudo snap install core; sudo snap refresh core
            # sudo snap install --classic certbot
            # sudo ln -s /snap/bin/certbot /usr/bin/certbot

            add-apt-repository ppa:certbot/certbot
            apt update
            apt install python3-certbot-nginx
            # 1. Run `sudo certbot --nginx' to configure current domain.
            # 2. Test if can renew certbot successful. `sudo certbot renew --dry-run'
            # 3. Add following crontab, will date cert first day of month.
            #    0 0 1 * * /usr/bin/certbot renew
            # more detail, check https://certbot.eff.org/

            sudo certbot certonly --nginx
        fi
    elif [[ $(cat /etc/*-release) =~ CentOS ]]; then
        if ! package_exists python3-certbot-nginx; then
            yum install -y certbot python3-certbot-nginx
            # 1. Run `sudo certbot --nginx' to configure current domain.
            # 2. Test if can renew certbot successful. `sudo certbot renew --dry-run'
            # 3. Add following crontab, will date cert first day of month.
            #    0 0 1 * * /usr/bin/certbot renew
            # more detail, check https://certbot.eff.org/        fi
        fi

        if ! package_exists nginx; then
            # wget https://nginx.org/packages/centos/8/x86_64/RPMS/nginx-1.20.1-1.el8.ngx.x86_64.rpm
            # sudo rpm -ivh nginx-1.20.1-1.el8.ngx.x86_64.rpm
            # systemctl enable nginx

            cat <<'HEREDOC' > /etc/yum.repos.d/nginx.repo
    [nginx-stable]
    name=nginx stable repo
    baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
    gpgcheck=1
    enabled=1
    gpgkey=https://nginx.org/keys/nginx_signing.key
    module_hotfixes=true

    [nginx-mainline]
    name=nginx mainline repo
    baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/
    gpgcheck=1
    enabled=0
    gpgkey=https://nginx.org/keys/nginx_signing.key
    module_hotfixes=true
HEREDOC

            sudo yum-config-manager --enable nginx-stable
            sudo yum install -y nginx
        fi
    fi

    # compile bri dynamic module support


    if [[ $(cat /etc/*-release) =~ Ubuntu ]]; then
        apt-get install libpcre3-dev zlib1g-dev libssl-dev
    elif [[ $(cat /etc/*-release) =~ CentOS ]]; then
        yum install pcre-devel zlib-devel openssl-devel
    fi

    nginx_version=$(nginx -v 2>&1 |cut -d'/' -f2)
    wget https://nginx.org/download/nginx-${nginx_version}.tar.gz
    tar xvf nginx-${nginx_version}.tar.gz
    cd nginx-${nginx_version}
    git clone https://github.com/google/ngx_brotli.git
    cd ngx_brotli && git submodule update --init && cd -
    ./configure --with-compat --add-dynamic-module=./ngx_brotli
    make modules
    sudo cp objs/*.so /etc/nginx/modules/

    # Then, add following config into /etc/nginx/nginx.conf to load module.

    # load_module modules/ngx_http_brotli_filter_module.so;
    # load_module modules/ngx_http_brotli_static_module.so;
}

if ! which -a pg_dump &>/dev/null; then
        init_pg
    fi
